version: 2.1

orbs:
  cypress: cypress-io/cypress@1
  aws-ecr: circleci/aws-ecr@6.15
  aws-ecs: circleci/aws-ecs@2.0.0

executors:
  api:
    working_directory: ~/project
    docker:
      - image: circleci/ruby:3.0.2-node
        environment:
          - BUNDLER_VERSION: 2.2.22
          - RAILS_ENV: test
          - DB_HOST: 127.0.0.1
      - image: circleci/mysql:8.0
        environment:
          - MYSQL_ROOT_HOST: '%'
          - MYSQL_ALLOW_EMPTY_PASSWORD: true
  front:
    working_directory: ~/project
    docker:
      - image: circleci/node:12.18.3

commands:
  backend_setup:
    steps:
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "./backend/Gemfile.lock" }}
            - v1-dependencies-
      - run:
          name: backend install dependencies
          command: |
            cd ./backend
            gem install bundler -v 2.2.22
            bundle install --jobs=4 --retry=3
      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "./backend/Gemfile.lock" }}
  db_setup:
    steps:
      - run:
          name: Use specific database.yml
          command: mv ./backend/config/database.yml.ci ./backend/config/database.yml
      - run:
          name: database setup
          command: |
            cd ./backend
            rails db:create
            rails db:migrate
  frontend_setup:
    steps:
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "./frontend/yarn.lock" }}
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            cd ./frontend
            yarn install
      - run:
          name: build
          command: |
            cd ./frontend
            yarn build
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "./frontend/yarn.lock" }}
  eslint:
    steps:
      - run:
          name: eslint
          command: |
            cd ./frontend
            yarn lint
  unit_test:
    steps:
      - run:
          name: jest
          environment:
            NODE_OPTIONS: --max_old_space_size=4096
          command: |
            cd ./frontend
            yarn test:unit

jobs:
  api_build:
    executor: api
    environment:
      RAILS_ENV: test
    working_directory: ~/project
    steps:
      - checkout
      - backend_setup
  rubocop:
    executor: api
    environment:
      RAILS_ENV: test
    working_directory: ~/project
    steps:
      - checkout
      - backend_setup
      - db_setup
      - run:
          name: rubocop
          command: |
            cd ./backend
            bundle exec rubocop
  rspec:
    executor: api
    environment:
      RAILS_ENV: test
    working_directory: ~/project
    steps:
      - checkout
      - backend_setup
      - db_setup
      - run:
          name: rspec
          command: |
            cd ./backend
            bin/rspec
  front_build:
    executor: front
    working_directory: ~/project
    steps:
      - checkout
      - frontend_setup
  eslint:
    executor: front
    working_directory: ~/project
    steps:
      - checkout
      - frontend_setup
      - eslint
  unit_test:
    executor: front
    working_directory: ~/project
    steps:
      - checkout
      - frontend_setup
      - unit_test

workflows:
  version: 2
  api:
    jobs:
      - api_build
      - rspec:
          requires:
            - api_build
      - rubocop:
          requires:
            - api_build
  front:
    jobs:
      - front_build
      - eslint:
          requires:
            - front_build
      - unit_test:
          requires:
            - front_build
      - cypress/run:
          cache-key: cache-{{ arch }}-{{ .Branch }}-{{ checksum "./frontend/package.json" }}
          working_directory: ~/project/frontend
          yarn: true
          command: yarn test:e2e --headless
  front_deploy:
    jobs:
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL
          region: AWS_REGION
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          # ECRにリポジトリがなかったら創るか？
          create-repo: true
          dockerfile: ./frontend/Dockerfile
          # ECRのリポジトリ
          repo: freechannel-front
          tag: "${CIRCLE_SHA1}"
          # filters:
          #   branches:
          #     only: master
      - aws-ecs/deploy-service-update:
          requires:
            - aws-ecr/build-and-push-image
          # ECSのタスク定義名
          family: 'frontend'
          # ECSのクラスター名かARNのフルパス
          cluster-name: 'freechannel'
          # サービス名
          service-name: 'frontend'
          # containerはタスク定義で設定したコンテナ名にする
          container-image-name-updates: "container=frontend,tag=${CIRCLE_SHA1}"
  api_deploy:
    jobs:
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL
          region: AWS_REGION
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          # ECRにリポジトリがなかったら創るか？
          create-repo: true
          dockerfile: ./backend/Dockerfile
          # ECRのリポジトリ
          repo: freechannel-api
          tag: "${CIRCLE_SHA1}"
          # filters:
          #   branches:
          #     only: master
      - aws-ecs/deploy-service-update:
          requires:
            - aws-ecr/build-and-push-image
          # ECSのタスク定義名
          family: 'backend'
          # ECSのクラスター名かARNのフルパス
          cluster-name: 'freechannel'
          # サービス名
          service-name: 'backend'
          # containerはタスク定義で設定したコンテナ名にする
          container-image-name-updates: "container=backend,tag=${CIRCLE_SHA1}"
  nginx_deploy:
    jobs:
      - aws-ecr/build-and-push-image:
          #AWS_ECR_ACCOUNT_URL => ${アカウントID}.dkr.ecr.${リージョン}.amazonaws.com
          account-url: AWS_ECR_ACCOUNT_URL
          # リージョン
          region: AWS_REGION
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          # ECRにリポジトリがなかったら創るか？
          create-repo: true
          # Dockerfleのパス(デフォルトはカレントディレクトリのパス)
          dockerfile: ./nginx/Dockerfile
          # ECRのリポジトリ
          repo: nginx-sample
          tag: "${CIRCLE_SHA1}"
          # filters:
          #   branches:
          #     only: master